import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.net.*;
import java.util.regex.*;

public class ChatUDP extends JFrame {
    private JTextArea taMain;
    private JTextField tfMsg;

    private final String FAM_TITLE = "Our Tiny Chat";
    private final int FRM_LOC_X = 100;
    private final int FRM_LOC_Y = 100;
    private final int FRM_WIDTH = 400;
    private final int FRM_HEIGHT = 400;

    private final int PORT = 9876;
    //private final String IP_BROADCAST = "85.140.2.123";
    private final String IP_BROADCAST = "192.168.43.43";

    private class thdReceiver extends Thread {
        @Override
        public void start() {
            super.start();
            try {
                customize();
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
        private void customize() throws Exception {
            DatagramSocket reciveSocket = new DatagramSocket(PORT);
            Pattern regex = Pattern.compile("[\u0020-\uFFFF]");
            while (true) {
                byte[] reciveData = new byte[1024];
                DatagramPacket recivePacket = new DatagramPacket(reciveData, reciveData.length);
                reciveSocket.receive(recivePacket);
                InetAddress IPAdress = recivePacket.getAddress();
                int port = recivePacket.getPort();
                String sentence = new String(recivePacket.getData());
                Matcher m = regex.matcher(sentence);
                taMain.append(IPAdress.toString() + ":" + port + ": ");
                while (m.find())
                    taMain.append(sentence.substring(m.start(), m.end()));
                taMain.append("\r\n");
                taMain.setCaretPosition(taMain.getText().length());
            }
        }
    }

    /*Данный метод отправляет сообщения в JTextArea*/
    private void btnSend_Handler() throws Exception {
        DatagramSocket sendSocket = new DatagramSocket();
        InetAddress IPAddress = InetAddress.getByName(IP_BROADCAST);
        byte[] sendData;
        String sentence = tfMsg.getText();
        tfMsg.setText("");
        sendData = sentence.getBytes("UTF-8");
        DatagramPacket sendPacket = new DatagramPacket(sendData, sendData.length, IPAddress, PORT);
        sendSocket.send(sendPacket);
    }

    private  void frameDraw(JFrame frame) {
        tfMsg = new JTextField();
        taMain = new JTextArea(FRM_HEIGHT / 19, 50);
        JScrollPane spMain = new JScrollPane(taMain);
        spMain.setLocation(0,0);
        taMain.setLineWrap(true);
        taMain.setEditable(false);
        JButton btnSend = new JButton();
        btnSend.setText("Send");
        btnSend.setToolTipText("Broadcast to message");
        /*при наступлении какого-либо события в слушателе кнопки
        * срабатывает метод btnSend_Handler*/
        btnSend.addActionListener(e ->{
            try {
                btnSend_Handler();
            } catch (Exception ex) {
                ex.fillInStackTrace();
            }
        });
        /*при наступлении какого-либо события в слушателе JTextField
         * срабатывает метод btnSend_Handler*/
        tfMsg.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    btnSend_Handler();
                } catch (Exception ex) {
                    ex.fillInStackTrace();
                }
            }
        });
        /*вывод текста в другие чати программы*/
        tfMsg.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String enteredText = tfMsg.getText();
                System.out.println(enteredText);
            }
        });
        frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        frame.setTitle(FAM_TITLE);
        frame.setLocation(FRM_LOC_X, FRM_LOC_Y);
        frame.setSize(FRM_WIDTH, FRM_HEIGHT);
        frame.setResizable(true);
        frame.getContentPane().add(BorderLayout.NORTH, spMain);
        frame.getContentPane().add(BorderLayout.CENTER, tfMsg);
        frame.getContentPane().add(BorderLayout.EAST, btnSend);
        frame.setVisible(true);
    }

    private void antistatic() {
        frameDraw(new ChatUDP());
        new thdReceiver().start();
    }

    public static void main(String[] args) {
        new ChatUDP().antistatic();
    }
}
